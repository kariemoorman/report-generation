import sys
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QLabel, QTextEdit, QPushButton, QFileDialog
from PyQt5.QtGui import QFont, QTextDocument, QPixmap
from PyQt5.QtPrintSupport import QPrinter, QPrintDialog
from datetime import datetime


class ReportGenerator(QWidget):
    def __init__(self):
        super().__init__()
        self.init_ui()

    def init_ui(self):
        self.setWindowTitle('Vulnerability Report Generator')
        self.setMinimumSize(800, 600)

        # Create Layout
        layout = QVBoxLayout()

        # Add headers
        headers = ['Description', 'Steps for Reproduction', 'Mitigation Options']
        self.text_edits = []
        self.investigators = {}
        self.vulnerabilities = {}
        self.appendix = {}
        
        # Add Title
        investigate_label = QLabel("Title")
        investigate_label.setFont(QFont('Arial', 18, QFont.Bold))
        layout.addWidget(investigate_label)
        text_edit = QTextEdit()
        layout.addWidget(text_edit)
        self.text_edits.append(text_edit)
        
        # Add Investigators
        investigate_label = QLabel("Investigators")
        investigate_label.setFont(QFont('Arial', 18, QFont.Bold))
        layout.addWidget(investigate_label)
        investigators_edit = QTextEdit()
        layout.addWidget(investigators_edit)
        self.investigators['Investigators'] = investigators_edit
        
        # Add CWEs
        vulnerability_label = QLabel("Associated CWEs")
        vulnerability_label.setFont(QFont('Arial', 18, QFont.Bold))
        layout.addWidget(vulnerability_label)
        vulnerability_edit = QTextEdit()
        layout.addWidget(vulnerability_edit)
        self.vulnerabilities['CWEs'] = vulnerability_edit

        for header_text in headers:
            header_label = QLabel(header_text)
            header_label.setFont(QFont('Arial', 18, QFont.Bold))
            layout.addWidget(header_label)

            text_edit = QTextEdit()
            layout.addWidget(text_edit)
            self.text_edits.append(text_edit)
        
        # Add Appendix
        appendix_label = QLabel("Appendix")
        appendix_label.setFont(QFont('Arial', 18, QFont.Bold))
        layout.addWidget(appendix_label)

        appendix_edit = QTextEdit()
        layout.addWidget(appendix_edit)
        self.appendix['Appendix'] = appendix_edit

        # Add "Add Image" button for the Appendix section
        add_image_button = QPushButton('Add Image to Appendix', self)
        add_image_button.clicked.connect(self.add_image_to_appendix)
        layout.addWidget(add_image_button)
        
        # Add Save To PDF button
        save_pdf_button = QPushButton('Save as PDF', self)
        save_pdf_button.clicked.connect(self.save_as_pdf)

        layout.addWidget(save_pdf_button)

        # Set the layout
        self.setLayout(layout)
        
        
    def add_image_to_appendix(self):
        file_dialog = QFileDialog()
        file_dialog.setNameFilter("Images (*.png *.jpg *.bmp *.gif *.tif)")
        file_paths, _ = file_dialog.getOpenFileNames(self, "Select Image Files", "", "Images (*.png *.jpg *.bmp *.gif *.tif)")

        if file_paths:
            # Add the image tags to the Appendix QTextEdit
            appendix_text = self.appendix['Appendix'].toPlainText()
            for file_path in file_paths:
                img_tag = f'<img id="img" src="{file_path}">'
                appendix_text += f'\n{img_tag}\n'
            self.appendix['Appendix'].setPlainText(appendix_text)
        
    def generate_html_content(self):
        current_datetime = datetime.now().strftime("%d %B %Y")
        investigators_text = self.investigators['Investigators'].toPlainText()
        cwe_text = self.vulnerabilities['CWEs'].toPlainText()
        appendix_text = self.appendix['Appendix'].toPlainText()
        html_content = """
        <html>
        <head>
            <style>
                body {
                    font-family: Arial, sans-serif;
                    margin: 0px;
                }
                h1 {
                    font-size: 16px;
                    margin-bottom: 0px;
                }
                h3 {
                    font-size: 14px;
                    font-weight: bold;
                    margin-bottom: 0px;
                }
                p {
                    margin-top: 5px;
                }
                .image-container {
                    margin: 10px auto;
                    width: 100%;
                }
                img {
                    width: 200px;
                    height: 200px;
                }
            </style>
        </head>
        <body>
        """
        
        html_content += f"<h1>Vulnerability Report</h1>"
        html_content += "<hr>"
        html_content += f"<p>Date: {current_datetime}</p>"
        html_content += f"<p>Investigators: {investigators_text}</p>"
        html_content += f"<p>CWEs: {cwe_text}</p>"
        
        for header_text, text_edit in zip(['Title', 'Description', 'Steps for Reproduction', 'Mitigation Options'], self.text_edits):
            html_content += f"<h3>{header_text}</h3>"
            html_content += "<hr>"
            html_content += f"<p>{text_edit.toPlainText()}</p>"
        
        html_content += "<h3>Appendix</h3>"
        html_content += "<hr>"
        for line in appendix_text.split('\n'):
            if line.strip().startswith('<img'):
                html_content += f'<div class="image-container">{line}</div>'
            else:
                html_content += f"<p>{line}</p>"

        html_content += """
                    </body>
                    </html>
                """

        return html_content

    def save_as_pdf(self):
        file_name, _ = QFileDialog.getSaveFileName(self, "Save PDF", "", "PDF Files (*.pdf);;All Files (*)")

        if file_name:
            html_content = self.generate_html_content()

            document = QTextDocument()
            document.setHtml(html_content)

            printer = QPrinter(QPrinter.HighResolution)
            printer.setOutputFormat(QPrinter.PdfFormat)
            printer.setOutputFileName(file_name)
            
            left_margin = .5 
            right_margin = .5 
            top_margin = .5
            bottom_margin = .5

            printer.setPageMargins(left_margin, top_margin, right_margin, bottom_margin, QPrinter.Point)

            document.print_(printer)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = ReportGenerator()
    ex.show()
    sys.exit(app.exec_())
